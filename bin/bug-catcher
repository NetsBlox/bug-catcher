#! /usr/bin/env node

const program = require('commander');
const pkg = require('../package');
const fs = require('fs');
const Q = require('q');
const path = require('path');
const BugCollector = require('..');
const Conditions = require('../src/conditions');
const uaParser = require('ua-parser-js');
const foreground = require('foreground-child');

if (process.argv.length === 2) process.argv.push('--help');

program
    .version(pkg.version)
    .command('ls')
    .option('-q, --quiet', 'Only display bug ids')
    .option('-l, --long', 'Display bugs in long mode (id|createdAt|reportCount|userCount|latestVersion|error)')
    .action(cmd => {
        const collector = new BugCollector();

        function format(bug) {
            let fields = [];
            if (cmd.quiet) {
                return [bug._id];
            } else if (cmd.long) {
                return collector.getBugStats(bug)
                    .then(stats => {
                        fields = [
                            bug._id,
                            new Date(bug.createdAt),
                            bug.reportCount,
                            stats.userCount,
                            stats.latestVersion,
                            bug.error
                        ];
                        if (bug.conditions.length) {
                            fields.push(`(${bug.conditions.join('|')})`);
                        }
                        return fields;
                    });
            } else {
                fields = [
                    bug._id,
                    bug.error
                ];
            }

            if (bug.conditions.length) {
                fields.push(`(${bug.conditions.join('|')})`);
            }

            return fields;
        }

        collector.connect()
            .then(() => collector.getBugs())
            .then(bugs => Q.all(bugs.map(format)))
            .then(lines => console.log(lines.map(fields => fields.join('\t')).join('\n')))
            .then(() => collector.disconnect())
            .catch(err => {
                console.log(err);
                collector.disconnect();
            });
    });

program
    .command('combine [ids...]')
    .action(ids => {
        const collector = new BugCollector();

        collector.connect()
            .then(() => collector.combine(ids))
            .then(() => console.log('Combined the bug reports!'))
            .then(() => collector.disconnect())
            .catch(err => {
                console.log(err);
                collector.disconnect();
            });
    });

program
    .command('split <id> [conds...]')
    .action((id, conds) => {
        const collector = new BugCollector();

        collector.connect()
            .then(() => collector.split(id, conds))
            .then(res => {
                if (res.matching === res.total) {
                    console.log(`Added condition to bug (all reports matched)!`);
                } else if (res.matching) {
                    console.log(`Created new condition with ${res.matching} reports`);
                } else {
                    console.log(`No matching conditions. Bug not modified`);
                }
            })
            .then(() => collector.disconnect())
            .catch(err => {
                console.log(err);
                collector.disconnect();
            });
    });

program
    .command('reports <id> [count]')
    .option('-e,--export', 'Export reports to the filesystem')
    .action((bugId, count, cmd) => {
        const collector = new BugCollector();

        collector.connect()
            .then(() => collector.getReportsFor(bugId, count))
            .then(reports => {
                console.log('found', reports.length, 'reports');
                if (cmd.export) {
                    return collector.getBugById(bugId)
                        .then(bug => {
                            console.log(bug.error);
                            let success = false;
                            const basename = bug.error.split('@').shift()
                                .split(/[^a-zA-Z0-9]/).pop();
                            let dirname = basename;
                            let index = 2;

                            while (!success) {
                                try {
                                    fs.mkdirSync(dirname);
                                    success = true;
                                } catch(e) {
                                    dirname = `${basename}_${index}`;
                                    index++;
                                }
                            }

                            reports.forEach((report, i) => {
                                const version = report.version;
                                const name = path.join(dirname, `bug-report-v${version}-${i}.json`);
                                fs.writeFileSync(name, JSON.stringify(report));
                            });
                            console.log(`saved reports to ${path.resolve(dirname)}`);
                        });
                } else {  // just print the reports
                    function format(report) {
                        return [
                            report._id,
                            new Date(report.timestamp),
                            report.event ? report.event.type : report.event,
                            report.version,
                            uaParser(report.userAgent).browser.name,
                            report.undoState.allEvents.length
                        ];
                    }
                    reports.map(format)
                        .forEach(fields => console.log(fields.join('\t')));
                }
            })
            .then(() => collector.disconnect())
            .catch(err => {
                console.log(err);
                collector.disconnect();
            });
    });

program
    .command('load-report <id>')
    .action(id => {
        const collector = new BugCollector();

        collector.connect()
            .then(() => collector.getReportById(id))
            .then(report => {
                const filename = `bug-report-${id}.json`;
                fs.writeFileSync(filename, JSON.stringify(report));
                const cmd = 'node';
                const args = [
                    `-e`,
                    `report = require("./${filename}"); console.log('Report has been loaded as "report"')`,
                    `-i`
                ];
                foreground(cmd, args);

            })
            .then(() => collector.disconnect())
            .catch(err => {
                console.log(err);
                collector.disconnect();
            });
    });

program
    .command('list-conds')
    .action(() => console.log(Object.keys(Conditions).join('\n')));

program.parse(process.argv);
